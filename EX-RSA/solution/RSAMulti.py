from Crypto.Util.number import inverse, long_to_bytes
import base64

# RSA values
n = 1866985265087677653477926707270188586128478349647874237785781784326454969181532261320386302860488728805379373983753096683374715599014955855350010686808266952551196935280335997560232034222212515182922639224353952196602330615399482977455082080249269256349419077936356756289275108959434138365164447368757405157619068463000358231903507070690115137277734938030923712994639127388482643841211821420670328871277088612297831140722007180191629204080377972134587900502666944989820230109119736161480842334628287727372647718984523610499641124417209360082265133263613534171127527000024531803432124611608317830622674171900704263679924782735253062170317365762638321043998120306686264645826798034270921784606809459169590192841301375494004672591562643807912218359341913324832081252752323251972689262950209445149380308989075762075411911297
e = 65537

# Prime factors of n
p = 7190087327851865359486369647722389736938199089240186029822654059442884969387986527978984929085526388818309701191155606376761694979440647520669848781243959
q = 8191492009115442293520793572665419390975587819980330530454311782457797794973552316641433237709291468730570735642661464549942545218359395400854632512056459

# l and k are given, compute r
l = 5630174515107310652652678088628871260741882168945688777057295633250486892331108455252687464907156746516434939532215185026764563940841787623422765301256949383795526501939389098315230223716339482584576223437062005117570955669118336793320309123830207054374667
k = 5630174515107310652652678088628871260741882168945688777057295633250486892331108455252687464907156746516434939532215185026764563940841787623422765301256949383795526501939389098315230223716339482584576223437062005117570955669118336793320309123830207054374911

# Step 1: Compute phi(n)
phi = (p - 1) * (q - 1) * (l - 1)*(k-1)

# Step 2: Compute d (modular inverse of e mod phi)
d = inverse(e, phi)

# Step 3: Convert ciphertext from hex to int
c_hex = "013811b8d419192215cd8a2cd3eab07538d318723a6c2df79e62fdfde36288b3ed2da42a95f11446e3c2239789a3422cf255874929c2ce4fcce634813e715daeddb8b8e1dd0b0aa18af32ed61d7fe40e83b6ce6c8b310834d40e124988122367e89bef229643261466e8446589a1e1810ce4fbec121b3b643bb26c0c5f0e27d03a1d2a0ba83f5a292259fb2aa6ccbf8b8ea7a6cc7af72efc6df307ff1ef1a4ee005ec4469f80199de64d79200ece15e63344a3ab3c9f52d21dd1556b678ba95d32d1f8c88935132e2e3f059885487029af6a5fd5ac954c41cfa7b9357c6ecc5bf8729214c797cea1194ffec44941d08453ae076bbf9473f17ecc86d6cb355c483f02eb6f87c8012924301ab050744ee6bc9df5858d6a38afc45959d17c0530202d946e85ecfa30e165d8a2803537d0445f9cc1a3e644078194e6187a0d8093f9d7c0f936d2eecd1bf4c3f36adb1075693989526e73"

# Convert hex to integer
c = int(c_hex, 16)

# Step 4: Decrypt the ciphertext
m = pow(c, d, n)

# Step 5: Convert decrypted message from integer to bytes
flag = hex(m)
print(flag)
