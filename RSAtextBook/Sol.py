import math
import random

def factor(n, e, d):
    m = e * d - 1
    s = 0
    while m % 2 == 0:
        m //= 2
        s += 1

    # Try a=2 first for efficiency
    a = 2
    while True:
        x = pow(a, m, n)
        if x == 1 or x == n - 1:
            a += 1
            continue
        prev = x
        for __ in range(s - 1):
            x = pow(x, 2, n)
            if x == 1:
                p = math.gcd(prev - 1, n)
                if p != 1 and p != n:
                    return (p, n // p)
                else:
                    break
            prev = x
        if x != 1:
            p = math.gcd(x - 1, n)
            if p != 1 and p != n:
                return (p, n // p)
        a += 1
        if a > 10:  # Fallback to random if needed
            break

    # Random fallback
    while True:
        a = random.randint(2, n - 1)
        x = pow(a, m, n)
        if x == 1 or x == n - 1:
            continue
        prev = x
        for __ in range(s - 1):
            x = pow(x, 2, n)
            if x == 1:
                p = math.gcd(prev - 1, n)
                return (p, n // p)
            prev = x
        if x != n - 1:
            p = math.gcd(x - 1, n)
            if p != 1 and p != n:
                return (p, n // p)

# Given parameters
n = 21361276630644179578873187771407718767216806816441134116615860448584274436365265974102010294349387315771253131553511153234772861104218560368404081422514391006746143633318677643739626373855641210321924657203201787452676853022218605475382637897313013638683646008249194281800381531804601720388060453839690012665433411628825702578115073730636866418647885491414911591497176515661009606451155829308791368295651728389709462809396735078739502133030178204311372823295829505407745607319608628419048350107764299859793123417408965430357929630100823308156964385511954394492771830327191879391112815910539051421424141047265352143469
e = 15383
d = 10775759387232583600861726393169336126477437489149268721636811875512836873574365465710953642602304204016441805945215273295315439262090361337763483835318967315370868789868877235612006803687172579607237557036783843894739152275395981179806882278043878686614125529741516454967884072469850442060154009087693850242572252666695376906510416333314146119368001168016104980483723976869187792852910659085189543373047287740253843609689294765068913143039937015822390456744919757620740247186943227568130480670577761587692170238791555130593442054730663656958012701191285500704962805157512876696531803648674016038398731101537183126247
e2 = 0x10001
c = 8268670411267923523104069857971605554100722542089465317285972765123051416495647348833202009124386143674159507487257995727358389693697057177276179033080722091545062923075127949549431984387955090916498832189998492095906834812665109826769505658182882958271647320265838592254217622339082707685821985355844669957800140148629619271629805954276903268856233443837550343304542666600138351163040937461418730748753168851590770352694732447397897749222912776640810825662910644633006798120713709374675236410444110073181513353148731354706659928525546823445791955989871557880179130075930521786489579955690121763276357689876551701723

# Factor n using the known private key
p, q = factor(n, e, d)
phi = (p - 1) * (q - 1)

# Compute friend's private key
d2 = pow(e2, -1, phi)

# Decrypt the ciphertext
m = pow(c, d2, n)

# Convert integer to bytes (handling leading zero)
hex_m = hex(m)[2:]
if len(hex_m) % 2 != 0:
    hex_m = '0' + hex_m
bytes_m = bytes.fromhex(hex_m)

print("Decrypted message:", bytes_m.decode())
